// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: internal/pb/middleware.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MiddlewareConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Compression           *MiddlewareConfiguration_Compression           `protobuf:"bytes,1,opt,name=compression,proto3" json:"compression,omitempty"`
	CircuitBreaker        *MiddlewareConfiguration_CircuitBreaker        `protobuf:"bytes,2,opt,name=circuit_breaker,json=circuitBreaker,proto3" json:"circuit_breaker,omitempty"`
	IpRestriction         *MiddlewareConfiguration_IPRestriction         `protobuf:"bytes,3,opt,name=ip_restriction,json=ipRestriction,proto3" json:"ip_restriction,omitempty"`
	BasicAuth             *MiddlewareConfiguration_BasicAuth             `protobuf:"bytes,4,opt,name=basic_auth,json=basicAuth,proto3" json:"basic_auth,omitempty"`
	Oauth                 *MiddlewareConfiguration_OAuth                 `protobuf:"bytes,5,opt,name=oauth,proto3" json:"oauth,omitempty"`
	WebhookVerification   *MiddlewareConfiguration_WebhookVerification   `protobuf:"bytes,6,opt,name=webhook_verification,json=webhookVerification,proto3" json:"webhook_verification,omitempty"`
	MutualTls             *MiddlewareConfiguration_MutualTLS             `protobuf:"bytes,7,opt,name=mutual_tls,json=mutualTls,proto3" json:"mutual_tls,omitempty"`
	TlsTermination        *MiddlewareConfiguration_TLSTermination        `protobuf:"bytes,8,opt,name=tls_termination,json=tlsTermination,proto3" json:"tls_termination,omitempty"`
	RequestHeaders        *MiddlewareConfiguration_Headers               `protobuf:"bytes,9,opt,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty"`
	ResponseHeaders       *MiddlewareConfiguration_Headers               `protobuf:"bytes,10,opt,name=response_headers,json=responseHeaders,proto3" json:"response_headers,omitempty"`
	WebsocketTcpConverter *MiddlewareConfiguration_WebsocketTCPConverter `protobuf:"bytes,11,opt,name=websocket_tcp_converter,json=websocketTcpConverter,proto3" json:"websocket_tcp_converter,omitempty"`
	Oidc                  *MiddlewareConfiguration_OIDC                  `protobuf:"bytes,12,opt,name=oidc,proto3" json:"oidc,omitempty"`
}

func (x *MiddlewareConfiguration) Reset() {
	*x = MiddlewareConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddlewareConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddlewareConfiguration) ProtoMessage() {}

func (x *MiddlewareConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddlewareConfiguration.ProtoReflect.Descriptor instead.
func (*MiddlewareConfiguration) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{0}
}

func (x *MiddlewareConfiguration) GetCompression() *MiddlewareConfiguration_Compression {
	if x != nil {
		return x.Compression
	}
	return nil
}

func (x *MiddlewareConfiguration) GetCircuitBreaker() *MiddlewareConfiguration_CircuitBreaker {
	if x != nil {
		return x.CircuitBreaker
	}
	return nil
}

func (x *MiddlewareConfiguration) GetIpRestriction() *MiddlewareConfiguration_IPRestriction {
	if x != nil {
		return x.IpRestriction
	}
	return nil
}

func (x *MiddlewareConfiguration) GetBasicAuth() *MiddlewareConfiguration_BasicAuth {
	if x != nil {
		return x.BasicAuth
	}
	return nil
}

func (x *MiddlewareConfiguration) GetOauth() *MiddlewareConfiguration_OAuth {
	if x != nil {
		return x.Oauth
	}
	return nil
}

func (x *MiddlewareConfiguration) GetWebhookVerification() *MiddlewareConfiguration_WebhookVerification {
	if x != nil {
		return x.WebhookVerification
	}
	return nil
}

func (x *MiddlewareConfiguration) GetMutualTls() *MiddlewareConfiguration_MutualTLS {
	if x != nil {
		return x.MutualTls
	}
	return nil
}

func (x *MiddlewareConfiguration) GetTlsTermination() *MiddlewareConfiguration_TLSTermination {
	if x != nil {
		return x.TlsTermination
	}
	return nil
}

func (x *MiddlewareConfiguration) GetRequestHeaders() *MiddlewareConfiguration_Headers {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *MiddlewareConfiguration) GetResponseHeaders() *MiddlewareConfiguration_Headers {
	if x != nil {
		return x.ResponseHeaders
	}
	return nil
}

func (x *MiddlewareConfiguration) GetWebsocketTcpConverter() *MiddlewareConfiguration_WebsocketTCPConverter {
	if x != nil {
		return x.WebsocketTcpConverter
	}
	return nil
}

func (x *MiddlewareConfiguration) GetOidc() *MiddlewareConfiguration_OIDC {
	if x != nil {
		return x.Oidc
	}
	return nil
}

type HTTPMiddleware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Compression           *MiddlewareConfiguration_Compression           `protobuf:"bytes,1,opt,name=compression,proto3" json:"compression,omitempty"`
	CircuitBreaker        *MiddlewareConfiguration_CircuitBreaker        `protobuf:"bytes,2,opt,name=circuit_breaker,json=circuitBreaker,proto3" json:"circuit_breaker,omitempty"`
	IpRestriction         *MiddlewareConfiguration_IPRestriction         `protobuf:"bytes,3,opt,name=ip_restriction,json=ipRestriction,proto3" json:"ip_restriction,omitempty"`
	BasicAuth             *MiddlewareConfiguration_BasicAuth             `protobuf:"bytes,4,opt,name=basic_auth,json=basicAuth,proto3" json:"basic_auth,omitempty"`
	Oauth                 *MiddlewareConfiguration_OAuth                 `protobuf:"bytes,5,opt,name=oauth,proto3" json:"oauth,omitempty"`
	Oidc                  *MiddlewareConfiguration_OIDC                  `protobuf:"bytes,6,opt,name=oidc,proto3" json:"oidc,omitempty"`
	WebhookVerification   *MiddlewareConfiguration_WebhookVerification   `protobuf:"bytes,7,opt,name=webhook_verification,json=webhookVerification,proto3" json:"webhook_verification,omitempty"`
	MutualTls             *MiddlewareConfiguration_MutualTLS             `protobuf:"bytes,8,opt,name=mutual_tls,json=mutualTls,proto3" json:"mutual_tls,omitempty"`
	RequestHeaders        *MiddlewareConfiguration_Headers               `protobuf:"bytes,9,opt,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty"`
	ResponseHeaders       *MiddlewareConfiguration_Headers               `protobuf:"bytes,10,opt,name=response_headers,json=responseHeaders,proto3" json:"response_headers,omitempty"`
	WebsocketTcpConverter *MiddlewareConfiguration_WebsocketTCPConverter `protobuf:"bytes,11,opt,name=websocket_tcp_converter,json=websocketTcpConverter,proto3" json:"websocket_tcp_converter,omitempty"`
}

func (x *HTTPMiddleware) Reset() {
	*x = HTTPMiddleware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPMiddleware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPMiddleware) ProtoMessage() {}

func (x *HTTPMiddleware) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPMiddleware.ProtoReflect.Descriptor instead.
func (*HTTPMiddleware) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{1}
}

func (x *HTTPMiddleware) GetCompression() *MiddlewareConfiguration_Compression {
	if x != nil {
		return x.Compression
	}
	return nil
}

func (x *HTTPMiddleware) GetCircuitBreaker() *MiddlewareConfiguration_CircuitBreaker {
	if x != nil {
		return x.CircuitBreaker
	}
	return nil
}

func (x *HTTPMiddleware) GetIpRestriction() *MiddlewareConfiguration_IPRestriction {
	if x != nil {
		return x.IpRestriction
	}
	return nil
}

func (x *HTTPMiddleware) GetBasicAuth() *MiddlewareConfiguration_BasicAuth {
	if x != nil {
		return x.BasicAuth
	}
	return nil
}

func (x *HTTPMiddleware) GetOauth() *MiddlewareConfiguration_OAuth {
	if x != nil {
		return x.Oauth
	}
	return nil
}

func (x *HTTPMiddleware) GetOidc() *MiddlewareConfiguration_OIDC {
	if x != nil {
		return x.Oidc
	}
	return nil
}

func (x *HTTPMiddleware) GetWebhookVerification() *MiddlewareConfiguration_WebhookVerification {
	if x != nil {
		return x.WebhookVerification
	}
	return nil
}

func (x *HTTPMiddleware) GetMutualTls() *MiddlewareConfiguration_MutualTLS {
	if x != nil {
		return x.MutualTls
	}
	return nil
}

func (x *HTTPMiddleware) GetRequestHeaders() *MiddlewareConfiguration_Headers {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *HTTPMiddleware) GetResponseHeaders() *MiddlewareConfiguration_Headers {
	if x != nil {
		return x.ResponseHeaders
	}
	return nil
}

func (x *HTTPMiddleware) GetWebsocketTcpConverter() *MiddlewareConfiguration_WebsocketTCPConverter {
	if x != nil {
		return x.WebsocketTcpConverter
	}
	return nil
}

type TCPMiddleware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpRestriction *MiddlewareConfiguration_IPRestriction `protobuf:"bytes,1,opt,name=ip_restriction,json=ipRestriction,proto3" json:"ip_restriction,omitempty"`
}

func (x *TCPMiddleware) Reset() {
	*x = TCPMiddleware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPMiddleware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPMiddleware) ProtoMessage() {}

func (x *TCPMiddleware) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPMiddleware.ProtoReflect.Descriptor instead.
func (*TCPMiddleware) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{2}
}

func (x *TCPMiddleware) GetIpRestriction() *MiddlewareConfiguration_IPRestriction {
	if x != nil {
		return x.IpRestriction
	}
	return nil
}

type TLSMiddleware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MutualTls      *MiddlewareConfiguration_MutualTLS      `protobuf:"bytes,1,opt,name=mutual_tls,json=mutualTls,proto3" json:"mutual_tls,omitempty"`
	TlsTermination *MiddlewareConfiguration_TLSTermination `protobuf:"bytes,2,opt,name=tls_termination,json=tlsTermination,proto3" json:"tls_termination,omitempty"`
	IpRestriction  *MiddlewareConfiguration_IPRestriction  `protobuf:"bytes,3,opt,name=ip_restriction,json=ipRestriction,proto3" json:"ip_restriction,omitempty"`
}

func (x *TLSMiddleware) Reset() {
	*x = TLSMiddleware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSMiddleware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSMiddleware) ProtoMessage() {}

func (x *TLSMiddleware) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSMiddleware.ProtoReflect.Descriptor instead.
func (*TLSMiddleware) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{3}
}

func (x *TLSMiddleware) GetMutualTls() *MiddlewareConfiguration_MutualTLS {
	if x != nil {
		return x.MutualTls
	}
	return nil
}

func (x *TLSMiddleware) GetTlsTermination() *MiddlewareConfiguration_TLSTermination {
	if x != nil {
		return x.TlsTermination
	}
	return nil
}

func (x *TLSMiddleware) GetIpRestriction() *MiddlewareConfiguration_IPRestriction {
	if x != nil {
		return x.IpRestriction
	}
	return nil
}

type MiddlewareConfiguration_Compression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MiddlewareConfiguration_Compression) Reset() {
	*x = MiddlewareConfiguration_Compression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddlewareConfiguration_Compression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddlewareConfiguration_Compression) ProtoMessage() {}

func (x *MiddlewareConfiguration_Compression) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddlewareConfiguration_Compression.ProtoReflect.Descriptor instead.
func (*MiddlewareConfiguration_Compression) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{0, 0}
}

type MiddlewareConfiguration_CircuitBreaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorThreshold float64 `protobuf:"fixed64,1,opt,name=error_threshold,json=errorThreshold,proto3" json:"error_threshold,omitempty"`
}

func (x *MiddlewareConfiguration_CircuitBreaker) Reset() {
	*x = MiddlewareConfiguration_CircuitBreaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddlewareConfiguration_CircuitBreaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddlewareConfiguration_CircuitBreaker) ProtoMessage() {}

func (x *MiddlewareConfiguration_CircuitBreaker) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddlewareConfiguration_CircuitBreaker.ProtoReflect.Descriptor instead.
func (*MiddlewareConfiguration_CircuitBreaker) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MiddlewareConfiguration_CircuitBreaker) GetErrorThreshold() float64 {
	if x != nil {
		return x.ErrorThreshold
	}
	return 0
}

type MiddlewareConfiguration_IPRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowCidrs []string `protobuf:"bytes,1,rep,name=allow_cidrs,json=allowCidrs,proto3" json:"allow_cidrs,omitempty"`
	DenyCidrs  []string `protobuf:"bytes,2,rep,name=deny_cidrs,json=denyCidrs,proto3" json:"deny_cidrs,omitempty"`
}

func (x *MiddlewareConfiguration_IPRestriction) Reset() {
	*x = MiddlewareConfiguration_IPRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddlewareConfiguration_IPRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddlewareConfiguration_IPRestriction) ProtoMessage() {}

func (x *MiddlewareConfiguration_IPRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddlewareConfiguration_IPRestriction.ProtoReflect.Descriptor instead.
func (*MiddlewareConfiguration_IPRestriction) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MiddlewareConfiguration_IPRestriction) GetAllowCidrs() []string {
	if x != nil {
		return x.AllowCidrs
	}
	return nil
}

func (x *MiddlewareConfiguration_IPRestriction) GetDenyCidrs() []string {
	if x != nil {
		return x.DenyCidrs
	}
	return nil
}

type MiddlewareConfiguration_BasicAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials []*MiddlewareConfiguration_BasicAuthCredential `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *MiddlewareConfiguration_BasicAuth) Reset() {
	*x = MiddlewareConfiguration_BasicAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddlewareConfiguration_BasicAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddlewareConfiguration_BasicAuth) ProtoMessage() {}

func (x *MiddlewareConfiguration_BasicAuth) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddlewareConfiguration_BasicAuth.ProtoReflect.Descriptor instead.
func (*MiddlewareConfiguration_BasicAuth) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MiddlewareConfiguration_BasicAuth) GetCredentials() []*MiddlewareConfiguration_BasicAuthCredential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type MiddlewareConfiguration_BasicAuthCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username          string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	CleartextPassword string `protobuf:"bytes,2,opt,name=cleartext_password,json=cleartextPassword,proto3" json:"cleartext_password,omitempty"`
	HashedPassword    []byte `protobuf:"bytes,3,opt,name=hashed_password,json=hashedPassword,proto3" json:"hashed_password,omitempty"`
}

func (x *MiddlewareConfiguration_BasicAuthCredential) Reset() {
	*x = MiddlewareConfiguration_BasicAuthCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddlewareConfiguration_BasicAuthCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddlewareConfiguration_BasicAuthCredential) ProtoMessage() {}

func (x *MiddlewareConfiguration_BasicAuthCredential) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddlewareConfiguration_BasicAuthCredential.ProtoReflect.Descriptor instead.
func (*MiddlewareConfiguration_BasicAuthCredential) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{0, 4}
}

func (x *MiddlewareConfiguration_BasicAuthCredential) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MiddlewareConfiguration_BasicAuthCredential) GetCleartextPassword() string {
	if x != nil {
		return x.CleartextPassword
	}
	return ""
}

func (x *MiddlewareConfiguration_BasicAuthCredential) GetHashedPassword() []byte {
	if x != nil {
		return x.HashedPassword
	}
	return nil
}

type MiddlewareConfiguration_OAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider           string   `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	ClientId           string   `protobuf:"bytes,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret       string   `protobuf:"bytes,7,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	SealedClientSecret []byte   `protobuf:"bytes,2,opt,name=sealed_client_secret,json=sealedClientSecret,proto3" json:"sealed_client_secret,omitempty"`
	AllowEmails        []string `protobuf:"bytes,3,rep,name=allow_emails,json=allowEmails,proto3" json:"allow_emails,omitempty"`
	AllowDomains       []string `protobuf:"bytes,4,rep,name=allow_domains,json=allowDomains,proto3" json:"allow_domains,omitempty"`
	Scopes             []string `protobuf:"bytes,5,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *MiddlewareConfiguration_OAuth) Reset() {
	*x = MiddlewareConfiguration_OAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddlewareConfiguration_OAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddlewareConfiguration_OAuth) ProtoMessage() {}

func (x *MiddlewareConfiguration_OAuth) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddlewareConfiguration_OAuth.ProtoReflect.Descriptor instead.
func (*MiddlewareConfiguration_OAuth) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{0, 5}
}

func (x *MiddlewareConfiguration_OAuth) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *MiddlewareConfiguration_OAuth) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *MiddlewareConfiguration_OAuth) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *MiddlewareConfiguration_OAuth) GetSealedClientSecret() []byte {
	if x != nil {
		return x.SealedClientSecret
	}
	return nil
}

func (x *MiddlewareConfiguration_OAuth) GetAllowEmails() []string {
	if x != nil {
		return x.AllowEmails
	}
	return nil
}

func (x *MiddlewareConfiguration_OAuth) GetAllowDomains() []string {
	if x != nil {
		return x.AllowDomains
	}
	return nil
}

func (x *MiddlewareConfiguration_OAuth) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type MiddlewareConfiguration_WebhookVerification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider     string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Secret       string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	SealedSecret []byte `protobuf:"bytes,3,opt,name=sealed_secret,json=sealedSecret,proto3" json:"sealed_secret,omitempty"`
}

func (x *MiddlewareConfiguration_WebhookVerification) Reset() {
	*x = MiddlewareConfiguration_WebhookVerification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddlewareConfiguration_WebhookVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddlewareConfiguration_WebhookVerification) ProtoMessage() {}

func (x *MiddlewareConfiguration_WebhookVerification) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddlewareConfiguration_WebhookVerification.ProtoReflect.Descriptor instead.
func (*MiddlewareConfiguration_WebhookVerification) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{0, 6}
}

func (x *MiddlewareConfiguration_WebhookVerification) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *MiddlewareConfiguration_WebhookVerification) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *MiddlewareConfiguration_WebhookVerification) GetSealedSecret() []byte {
	if x != nil {
		return x.SealedSecret
	}
	return nil
}

type MiddlewareConfiguration_MutualTLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MutualTlsCa []byte `protobuf:"bytes,4,opt,name=mutual_tls_ca,json=mutualTlsCa,proto3" json:"mutual_tls_ca,omitempty"`
}

func (x *MiddlewareConfiguration_MutualTLS) Reset() {
	*x = MiddlewareConfiguration_MutualTLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddlewareConfiguration_MutualTLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddlewareConfiguration_MutualTLS) ProtoMessage() {}

func (x *MiddlewareConfiguration_MutualTLS) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddlewareConfiguration_MutualTLS.ProtoReflect.Descriptor instead.
func (*MiddlewareConfiguration_MutualTLS) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{0, 7}
}

func (x *MiddlewareConfiguration_MutualTLS) GetMutualTlsCa() []byte {
	if x != nil {
		return x.MutualTlsCa
	}
	return nil
}

type MiddlewareConfiguration_TLSTermination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert      []byte `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Key       []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	SealedKey []byte `protobuf:"bytes,3,opt,name=sealed_key,json=sealedKey,proto3" json:"sealed_key,omitempty"`
}

func (x *MiddlewareConfiguration_TLSTermination) Reset() {
	*x = MiddlewareConfiguration_TLSTermination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddlewareConfiguration_TLSTermination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddlewareConfiguration_TLSTermination) ProtoMessage() {}

func (x *MiddlewareConfiguration_TLSTermination) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddlewareConfiguration_TLSTermination.ProtoReflect.Descriptor instead.
func (*MiddlewareConfiguration_TLSTermination) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{0, 8}
}

func (x *MiddlewareConfiguration_TLSTermination) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *MiddlewareConfiguration_TLSTermination) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MiddlewareConfiguration_TLSTermination) GetSealedKey() []byte {
	if x != nil {
		return x.SealedKey
	}
	return nil
}

type MiddlewareConfiguration_Headers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Add       []string          `protobuf:"bytes,1,rep,name=add,proto3" json:"add,omitempty"`
	Remove    []string          `protobuf:"bytes,2,rep,name=remove,proto3" json:"remove,omitempty"`
	AddParsed map[string]string `protobuf:"bytes,3,rep,name=addParsed,proto3" json:"addParsed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MiddlewareConfiguration_Headers) Reset() {
	*x = MiddlewareConfiguration_Headers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddlewareConfiguration_Headers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddlewareConfiguration_Headers) ProtoMessage() {}

func (x *MiddlewareConfiguration_Headers) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddlewareConfiguration_Headers.ProtoReflect.Descriptor instead.
func (*MiddlewareConfiguration_Headers) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{0, 9}
}

func (x *MiddlewareConfiguration_Headers) GetAdd() []string {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *MiddlewareConfiguration_Headers) GetRemove() []string {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *MiddlewareConfiguration_Headers) GetAddParsed() map[string]string {
	if x != nil {
		return x.AddParsed
	}
	return nil
}

type MiddlewareConfiguration_WebsocketTCPConverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MiddlewareConfiguration_WebsocketTCPConverter) Reset() {
	*x = MiddlewareConfiguration_WebsocketTCPConverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddlewareConfiguration_WebsocketTCPConverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddlewareConfiguration_WebsocketTCPConverter) ProtoMessage() {}

func (x *MiddlewareConfiguration_WebsocketTCPConverter) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddlewareConfiguration_WebsocketTCPConverter.ProtoReflect.Descriptor instead.
func (*MiddlewareConfiguration_WebsocketTCPConverter) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{0, 10}
}

type MiddlewareConfiguration_OIDC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuerUrl          string   `protobuf:"bytes,1,opt,name=issuer_url,json=issuerUrl,proto3" json:"issuer_url,omitempty"`
	ClientId           string   `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret       string   `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	SealedClientSecret []byte   `protobuf:"bytes,4,opt,name=sealed_client_secret,json=sealedClientSecret,proto3" json:"sealed_client_secret,omitempty"`
	AllowEmails        []string `protobuf:"bytes,5,rep,name=allow_emails,json=allowEmails,proto3" json:"allow_emails,omitempty"`
	AllowDomains       []string `protobuf:"bytes,6,rep,name=allow_domains,json=allowDomains,proto3" json:"allow_domains,omitempty"`
	Scopes             []string `protobuf:"bytes,7,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *MiddlewareConfiguration_OIDC) Reset() {
	*x = MiddlewareConfiguration_OIDC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_pb_middleware_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddlewareConfiguration_OIDC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddlewareConfiguration_OIDC) ProtoMessage() {}

func (x *MiddlewareConfiguration_OIDC) ProtoReflect() protoreflect.Message {
	mi := &file_internal_pb_middleware_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddlewareConfiguration_OIDC.ProtoReflect.Descriptor instead.
func (*MiddlewareConfiguration_OIDC) Descriptor() ([]byte, []int) {
	return file_internal_pb_middleware_proto_rawDescGZIP(), []int{0, 11}
}

func (x *MiddlewareConfiguration_OIDC) GetIssuerUrl() string {
	if x != nil {
		return x.IssuerUrl
	}
	return ""
}

func (x *MiddlewareConfiguration_OIDC) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *MiddlewareConfiguration_OIDC) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *MiddlewareConfiguration_OIDC) GetSealedClientSecret() []byte {
	if x != nil {
		return x.SealedClientSecret
	}
	return nil
}

func (x *MiddlewareConfiguration_OIDC) GetAllowEmails() []string {
	if x != nil {
		return x.AllowEmails
	}
	return nil
}

func (x *MiddlewareConfiguration_OIDC) GetAllowDomains() []string {
	if x != nil {
		return x.AllowDomains
	}
	return nil
}

func (x *MiddlewareConfiguration_OIDC) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

var File_internal_pb_middleware_proto protoreflect.FileDescriptor

var file_internal_pb_middleware_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0xc4,
	0x13, 0x0a, 0x17, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x5f, 0x0a, 0x0f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x52, 0x0e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x50, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x69, 0x70, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x43, 0x0a, 0x05, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x05, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x12, 0x6e, 0x0a, 0x14, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x13, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0a, 0x6d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x4c, 0x53, 0x52, 0x09,
	0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x6c, 0x73, 0x12, 0x5f, 0x0a, 0x0f, 0x74, 0x6c, 0x73,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x53, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x6c, 0x73, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x75, 0x0a, 0x17, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x54, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x52, 0x15, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x63, 0x70, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x04, 0x6f, 0x69, 0x64, 0x63, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f,
	0x49, 0x44, 0x43, 0x52, 0x04, 0x6f, 0x69, 0x64, 0x63, 0x1a, 0x0d, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0e, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x1a, 0x4f, 0x0a, 0x0d, 0x49, 0x50, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x69,
	0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x43, 0x69, 0x64, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x63, 0x69,
	0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6e, 0x79, 0x43,
	0x69, 0x64, 0x72, 0x73, 0x1a, 0x6a, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x5d, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x1a, 0x89, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x68, 0x61,
	0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0xf7, 0x01, 0x0a,
	0x05, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x12, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x1a, 0x6e, 0x0a, 0x13, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x2f, 0x0a, 0x09, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c,
	0x54, 0x4c, 0x53, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x6c,
	0x73, 0x5f, 0x63, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x75, 0x74, 0x75,
	0x61, 0x6c, 0x54, 0x6c, 0x73, 0x43, 0x61, 0x1a, 0x55, 0x0a, 0x0e, 0x54, 0x4c, 0x53, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x1a, 0xcf,
	0x01, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x64, 0x64, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x64, 0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x17, 0x0a, 0x15, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x43, 0x50,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x1a, 0xf9, 0x01, 0x0a, 0x04, 0x4f, 0x49,
	0x44, 0x43, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x12, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xee, 0x07, 0x0a, 0x0e, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x5f, 0x0a, 0x0f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x52, 0x0e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x12, 0x5c, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x50, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x69, 0x70, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x41, 0x75, 0x74, 0x68, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x43, 0x0a, 0x05, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x05,
	0x6f, 0x61, 0x75, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x04, 0x6f, 0x69, 0x64, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x49, 0x44,
	0x43, 0x52, 0x04, 0x6f, 0x69, 0x64, 0x63, 0x12, 0x6e, 0x0a, 0x14, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x13, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0a, 0x6d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x4c, 0x53, 0x52, 0x09,
	0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x0f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x75, 0x0a, 0x17, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x52,
	0x15, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x63, 0x70, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x22, 0x6d, 0x0a, 0x0d, 0x54, 0x43, 0x50, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x5c, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x50, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x70, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x02, 0x0a, 0x0d, 0x54, 0x4c, 0x53, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x6d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x4c, 0x53, 0x52, 0x09,
	0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x6c, 0x73, 0x12, 0x5f, 0x0a, 0x0f, 0x74, 0x6c, 0x73,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x53, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x6c, 0x73, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0e, 0x69, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x50, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x6e, 0x67, 0x72, 0x6f, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x67, 0x72,
	0x6f, 0x6b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_pb_middleware_proto_rawDescOnce sync.Once
	file_internal_pb_middleware_proto_rawDescData = file_internal_pb_middleware_proto_rawDesc
)

func file_internal_pb_middleware_proto_rawDescGZIP() []byte {
	file_internal_pb_middleware_proto_rawDescOnce.Do(func() {
		file_internal_pb_middleware_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_pb_middleware_proto_rawDescData)
	})
	return file_internal_pb_middleware_proto_rawDescData
}

var file_internal_pb_middleware_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_internal_pb_middleware_proto_goTypes = []interface{}{
	(*MiddlewareConfiguration)(nil),                       // 0: agent_internal.MiddlewareConfiguration
	(*HTTPMiddleware)(nil),                                // 1: agent_internal.HTTPMiddleware
	(*TCPMiddleware)(nil),                                 // 2: agent_internal.TCPMiddleware
	(*TLSMiddleware)(nil),                                 // 3: agent_internal.TLSMiddleware
	(*MiddlewareConfiguration_Compression)(nil),           // 4: agent_internal.MiddlewareConfiguration.Compression
	(*MiddlewareConfiguration_CircuitBreaker)(nil),        // 5: agent_internal.MiddlewareConfiguration.CircuitBreaker
	(*MiddlewareConfiguration_IPRestriction)(nil),         // 6: agent_internal.MiddlewareConfiguration.IPRestriction
	(*MiddlewareConfiguration_BasicAuth)(nil),             // 7: agent_internal.MiddlewareConfiguration.BasicAuth
	(*MiddlewareConfiguration_BasicAuthCredential)(nil),   // 8: agent_internal.MiddlewareConfiguration.BasicAuthCredential
	(*MiddlewareConfiguration_OAuth)(nil),                 // 9: agent_internal.MiddlewareConfiguration.OAuth
	(*MiddlewareConfiguration_WebhookVerification)(nil),   // 10: agent_internal.MiddlewareConfiguration.WebhookVerification
	(*MiddlewareConfiguration_MutualTLS)(nil),             // 11: agent_internal.MiddlewareConfiguration.MutualTLS
	(*MiddlewareConfiguration_TLSTermination)(nil),        // 12: agent_internal.MiddlewareConfiguration.TLSTermination
	(*MiddlewareConfiguration_Headers)(nil),               // 13: agent_internal.MiddlewareConfiguration.Headers
	(*MiddlewareConfiguration_WebsocketTCPConverter)(nil), // 14: agent_internal.MiddlewareConfiguration.WebsocketTCPConverter
	(*MiddlewareConfiguration_OIDC)(nil),                  // 15: agent_internal.MiddlewareConfiguration.OIDC
	nil,                                                   // 16: agent_internal.MiddlewareConfiguration.Headers.AddParsedEntry
}
var file_internal_pb_middleware_proto_depIdxs = []int32{
	4,  // 0: agent_internal.MiddlewareConfiguration.compression:type_name -> agent_internal.MiddlewareConfiguration.Compression
	5,  // 1: agent_internal.MiddlewareConfiguration.circuit_breaker:type_name -> agent_internal.MiddlewareConfiguration.CircuitBreaker
	6,  // 2: agent_internal.MiddlewareConfiguration.ip_restriction:type_name -> agent_internal.MiddlewareConfiguration.IPRestriction
	7,  // 3: agent_internal.MiddlewareConfiguration.basic_auth:type_name -> agent_internal.MiddlewareConfiguration.BasicAuth
	9,  // 4: agent_internal.MiddlewareConfiguration.oauth:type_name -> agent_internal.MiddlewareConfiguration.OAuth
	10, // 5: agent_internal.MiddlewareConfiguration.webhook_verification:type_name -> agent_internal.MiddlewareConfiguration.WebhookVerification
	11, // 6: agent_internal.MiddlewareConfiguration.mutual_tls:type_name -> agent_internal.MiddlewareConfiguration.MutualTLS
	12, // 7: agent_internal.MiddlewareConfiguration.tls_termination:type_name -> agent_internal.MiddlewareConfiguration.TLSTermination
	13, // 8: agent_internal.MiddlewareConfiguration.request_headers:type_name -> agent_internal.MiddlewareConfiguration.Headers
	13, // 9: agent_internal.MiddlewareConfiguration.response_headers:type_name -> agent_internal.MiddlewareConfiguration.Headers
	14, // 10: agent_internal.MiddlewareConfiguration.websocket_tcp_converter:type_name -> agent_internal.MiddlewareConfiguration.WebsocketTCPConverter
	15, // 11: agent_internal.MiddlewareConfiguration.oidc:type_name -> agent_internal.MiddlewareConfiguration.OIDC
	4,  // 12: agent_internal.HTTPMiddleware.compression:type_name -> agent_internal.MiddlewareConfiguration.Compression
	5,  // 13: agent_internal.HTTPMiddleware.circuit_breaker:type_name -> agent_internal.MiddlewareConfiguration.CircuitBreaker
	6,  // 14: agent_internal.HTTPMiddleware.ip_restriction:type_name -> agent_internal.MiddlewareConfiguration.IPRestriction
	7,  // 15: agent_internal.HTTPMiddleware.basic_auth:type_name -> agent_internal.MiddlewareConfiguration.BasicAuth
	9,  // 16: agent_internal.HTTPMiddleware.oauth:type_name -> agent_internal.MiddlewareConfiguration.OAuth
	15, // 17: agent_internal.HTTPMiddleware.oidc:type_name -> agent_internal.MiddlewareConfiguration.OIDC
	10, // 18: agent_internal.HTTPMiddleware.webhook_verification:type_name -> agent_internal.MiddlewareConfiguration.WebhookVerification
	11, // 19: agent_internal.HTTPMiddleware.mutual_tls:type_name -> agent_internal.MiddlewareConfiguration.MutualTLS
	13, // 20: agent_internal.HTTPMiddleware.request_headers:type_name -> agent_internal.MiddlewareConfiguration.Headers
	13, // 21: agent_internal.HTTPMiddleware.response_headers:type_name -> agent_internal.MiddlewareConfiguration.Headers
	14, // 22: agent_internal.HTTPMiddleware.websocket_tcp_converter:type_name -> agent_internal.MiddlewareConfiguration.WebsocketTCPConverter
	6,  // 23: agent_internal.TCPMiddleware.ip_restriction:type_name -> agent_internal.MiddlewareConfiguration.IPRestriction
	11, // 24: agent_internal.TLSMiddleware.mutual_tls:type_name -> agent_internal.MiddlewareConfiguration.MutualTLS
	12, // 25: agent_internal.TLSMiddleware.tls_termination:type_name -> agent_internal.MiddlewareConfiguration.TLSTermination
	6,  // 26: agent_internal.TLSMiddleware.ip_restriction:type_name -> agent_internal.MiddlewareConfiguration.IPRestriction
	8,  // 27: agent_internal.MiddlewareConfiguration.BasicAuth.credentials:type_name -> agent_internal.MiddlewareConfiguration.BasicAuthCredential
	16, // 28: agent_internal.MiddlewareConfiguration.Headers.addParsed:type_name -> agent_internal.MiddlewareConfiguration.Headers.AddParsedEntry
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_internal_pb_middleware_proto_init() }
func file_internal_pb_middleware_proto_init() {
	if File_internal_pb_middleware_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_pb_middleware_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddlewareConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_pb_middleware_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPMiddleware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_pb_middleware_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCPMiddleware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_pb_middleware_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSMiddleware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_pb_middleware_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddlewareConfiguration_Compression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_pb_middleware_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddlewareConfiguration_CircuitBreaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_pb_middleware_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddlewareConfiguration_IPRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_pb_middleware_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddlewareConfiguration_BasicAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_pb_middleware_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddlewareConfiguration_BasicAuthCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_pb_middleware_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddlewareConfiguration_OAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_pb_middleware_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddlewareConfiguration_WebhookVerification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_pb_middleware_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddlewareConfiguration_MutualTLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_pb_middleware_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddlewareConfiguration_TLSTermination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_pb_middleware_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddlewareConfiguration_Headers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_pb_middleware_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddlewareConfiguration_WebsocketTCPConverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_pb_middleware_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddlewareConfiguration_OIDC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_pb_middleware_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_pb_middleware_proto_goTypes,
		DependencyIndexes: file_internal_pb_middleware_proto_depIdxs,
		MessageInfos:      file_internal_pb_middleware_proto_msgTypes,
	}.Build()
	File_internal_pb_middleware_proto = out.File
	file_internal_pb_middleware_proto_rawDesc = nil
	file_internal_pb_middleware_proto_goTypes = nil
	file_internal_pb_middleware_proto_depIdxs = nil
}
